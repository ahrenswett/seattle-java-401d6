/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradlePractice;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testSomeLibraryMethod() {
        
        Library classUnderTest = new Library();
        // tests assert things about how our code should work
        // first argument is a helpful human-readable message
        // then comes what we're actually trying to test
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testLongString() {
        // eventually, I will call the method like this
        Library.longString(new String[]{"a", "abcd", "ab"});
        // it should return "abcd"
        // assertEquals takes 3 args: human-readable message, expected answer, actual answer
        assertEquals(
                "in this array, abcd should be the longest string",
                "abcd",
                Library.longString(new String[]{"a", "abcd", "ab"})
        );
    }

    @Test
    public void testLongString_spacesCountInLength() {
        assertEquals(
                "spaces should count towards length",
                "hello world",
                Library.longString(new String[]{"helloworld", "hello world"})
        );
    }

    // other tests I would write if I had all the time:
    // array with just one string in it
    // array of length 0... what should it do? probably throw an exception
    // array that contains duplicate longest strings
    // longest string at beginning of the array
    // longest string at the end of the array
}
